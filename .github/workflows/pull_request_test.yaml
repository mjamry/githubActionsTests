name: pull_request_test
on:
  pull_request:
    branches: main
    types: [opened, synchronize, reopened]
  workflow_dispatch:
run-name: "ddd"
jobs:
  setup:
    runs-on: ubuntu-latest

    outputs:
      is_maintenance: ${{ steps.is_maintenance.outputs.result }}

    steps:
      - name: Check if maintenance
        id: is_maintenance
        run: |
          if [[ "${{ github.head_ref }}" =~ ^(fix/|change/) ]]; then
            echo "result=false" >> "$GITHUB_OUTPUT"
          else
            echo "result=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Summary
        run: |
          echo "IsMaintenance: ${{ steps.is_maintenance.outputs.result }}"

  update:
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ needs.setup.outputs.is_maintenance != 'true'}}

    permissions:
      contents: read
      pull-requests: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Version
        working-directory: ${{ github.workspace }}
        id: version
        run: | 
          npm install commander > /dev/null
          echo "VERSION=$(node ./.github/versionUpdate.js -f app.config.js --field version)" >> "$GITHUB_OUTPUT"
          node ./.github/versionUpdate.js -f app.config.js --field version
        continue-on-error: false
      
      - name: get version
        env: 
          VERSION: ${{ steps.version.outputs.VERSION }}
        run: echo "App version update $VERSION"
      
      - name: Summary
        run: |
          echo "Successfully updated UAT with 
          app version ${{ steps.version_update.outputs.VERSION_SUMMARY }}
          test !" >> $GITHUB_STEP_SUMMARY

  maintenance:
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ needs.setup.outputs.is_maintenance == 'true' }}

    steps:
    - name: Maintenance Task
      run: echo "MAINTENANCE" >> $GITHUB_STEP_SUMMARY
